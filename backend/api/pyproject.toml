[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "quivr-api"
version = "0.1.0"
description = "quivr backend API"
packages = [{ include = "quivr_api" }]
authors = ["aminediro <amine@quivr.app>"]
readme = "README.md"


[tool.poetry.dependencies]
python = "^3.11,<3.13"
quivr-core = { path = "../core", extras = ["base"] }
supabase = "*"
fastapi = "*"
python-jose = "*"
python-multipart = "*"
uvicorn = "*"
redis = "*"
asyncpg = "*"
psycopg2-binary = "*"
sqlmodel = "^0.0.19"
celery = { extras = ["redis", "sqs"], version = "*" }
pydantic-settings = "*"
boto3 = "*"
botocore = "*"
python-dotenv = "*"
resend = "*"
colorlog = "*"
unidecode = "*"

# Monitoring 
posthog = "*"
pyinstrument = "*"
sentry-sdk = { version = "^2.5.0", extras = ["fastapi"] }

# OAuth Clients
google-api-python-client = "*"
google-auth-httplib2 = "*"
google-auth-oauthlib = "*"
msal = "*"

# Maybe
langchain = "*"
litellm = "*"
openai = "*"
tiktoken = "*"
langchain-community = "*"
langchain-openai = "*"
langchain-cohere = "*"
# langfuse = "*"
# langgraph = "*"

# TO delete
beautifulsoup4 = "*"
playwright = "*"


[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pre-commit = "^3.7.1"
ipykernel = "*"
ruff = "^0.4.8"
pytest-asyncio = "^0.23.7"
flake8 = "*"
flake8-black = "*"
pytest = "*"
pytest-dotenv = "*"
pytest-mock = "*"
pytest-celery = "*"
pyright = "*"

[[tool.poetry.source]]
name = "pytorch-cpu-src"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.ruff]
line-length = 88
exclude = [".git", "__pycache__", ".mypy_cache", ".pytest_cache"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]
ignore = [
    "B904",
    "B006",
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]


[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
known-first-party = []

[tool.pytest.ini_options]
addopts = "--tb=short -ra -v"
filterwarnings = ["ignore::DeprecationWarning"]
